name: Spring Legacy + Nginx 자동배포

on:
  push:
    branches: ["master"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      # Docker 이미지 빌드 전
      - name: Maven Build
        run: |
          mvn clean package -DskipTests

      # 2. 도커허브 로그인
      - name: 도커허브에 로그인
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. 이미지 빌드
      - name: 이미지 빌드
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/hightech-backend .
          


      # 4. 도커허브에 이미지 푸시
      - name: 도커허브에 이미지 푸시
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/hightech-backend

      # 2. SSH로 EC2 접속 후 배포
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            APP_DIR=/home/ubuntu/hightech

            # Git clone 또는 pull
            if [ ! -d "$APP_DIR/.git" ]; then
              # 기존 소스 초기화
              sudo rm -rf $APP_DIR
              mkdir -p $APP_DIR
              cd $APP_DIR

              echo "Git 저장소 없음 → 클론 실행"
              sudo git clone https://github.com/poly-hitech/hightech-team.git .
            else
              echo "Git 저장소 있음 → 최신으로 pull"
              cd $APP_DIR
              sudo git reset --hard
              sudo git clean -fd
              sudo git pull origin master
            fi

            # 최신 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/hightech-backend

            # Docker Compose로 springboot-app + nginx 실행
            cd $APP_DIR
            sudo mvn clean package -DskipTests
            sudo docker-compose stop oracle-db hightech-backend spring-nginx
            sudo docker-compose up -d --build oracle-db hightech-backend spring-nginx

            #톰캣 설정 복사(포트설정)
            echo "${{ secrets.SERVER }}" > /home/ubuntu/server.xml
            sudo docker cp ~/server.xml hightech-backend:/usr/local/tomcat/conf/server.xml

            # 톰캣 재시작
            sudo docker restart hightech-backend
            sleep 30
            sudo docker restart spring-nginx

            if [ ! -d "/home/ubuntu/upload" ]; then
              echo "🔧 업로드 디렉토리 생성 중..."
              sudo mkdir -p /home/ubuntu/upload
            fi

            # ACL 설치
            if ! command -v setfacl &> /dev/null; then
              echo "🔧 ACL 설치 중..."
              sudo apt-get update -y
              sudo apt-get install -y acl
            fi

            # 기본 권한 및 소유자 설정
            sudo chown -R ubuntu:ubuntu /home/ubuntu/upload
            sudo chmod -R 775 /home/ubuntu/upload

            # UID/GID 추출
            TOMCAT_UID=$(docker exec hightech-backend id -u)
            TOMCAT_GID=$(docker exec hightech-backend id -g)

            # UID, GID 권한 부여
            sudo setfacl -R -m u:$TOMCAT_UID:rwx $UPLOAD_DIR
            sudo setfacl -R -m g:$TOMCAT_GID:rwx $UPLOAD_DIR
            echo "✅ Tomcat UID/GID 권한 설정 완료!"

            # docker 그룹에 ubuntu 추가 (이미 포함되어 있으면 무시)
            sudo usermod -aG docker ubuntu

            # Tomcat과 Docker 모두 접근할 수 있도록 ACL 설정
            # Tomcat이 컨테이너 안에 있다면 UID가 1000일 가능성이 높음 → 안전하게 UID 기준으로 설정
            sudo setfacl -R -m u:ubuntu:rwx /home/ubuntu/upload
            sudo setfacl -R -m g:docker:rwx /home/ubuntu/upload
            sudo setfacl -R -m o:rx /home/ubuntu/upload

            echo "✅ /home/ubuntu/upload 권한 설정 완료!"

            sudo docker ps -a
            sudo docker inspect spring-nginx --format '{{.State.Status}} {{.State.ExitCode}}' || echo "spring-nginx not found"
            sudo docker logs spring-nginx --tail=50
            sudo docker logs hightech-backend --tail=50
            sudo docker logs oracle-db --tail=50
